[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Emacs Starter Guide",
    "section": "",
    "text": "Preface\nThe following is a quick starter guide designed to get you acquainted with Emacs, a desktop application for editing \\(\\LaTeX\\). Of our recommended applications, Emacs is the most powerful in terms of text editing and customization.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "overview.html",
    "href": "overview.html",
    "title": "1  Overview",
    "section": "",
    "text": "This section will walk you through installing the Emacs application, necessary packages, as well as the IQSS configuration.\nThese instructions only support MacOS users currently. Please stay updated as we prepare materials for Microsoft users.\nIn preparation for installing Emacs, there are other programs that we also recommend to install. Please refer to our documentation for useful programs to install prior to Emacs. This page includes links to external download sites for programs such as R, MikTex, and Git.\nIn fact, if you do not install some of these (or if you have not previously installed some of these), you may run into problems when loading our Emacs configuration. For instance, you will likely need Git already installed in order for your Copilot integration to work.\nFor this process, we will teach you how to use the command line in the terminal. However, there will also be external links for many of the download options if you are not wholly comfortable in the terminal, or find yourself running into problems.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "computer_installer.html",
    "href": "computer_installer.html",
    "title": "2  Installing Necessary Packages on Your Computer",
    "section": "",
    "text": "There are a few programs that we will need to install: Homebrew, node, ispell, and gnu-tar.\nHomebrew is necessary as MacOS’s package manager. This will allow you to install various programs via the command line. Node.js, ispell, and gnu-tar are all dependencies that are needed in order to integrate with Copilot.\nTo do so, please open your Terminal. (If you don’t know where this is: Finder &gt; Applications &gt; Utilities &gt; Terminal).\n\nNow type: /bin/bash -c “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)”\nPress enter. Follow the instructions. It will likely give you a message to copy two lines of code. Copy and paste the first and press enter. When that is done, copy and paste the second and press enter. Make sure to replace “yourusername” with your actual username.\n\nThe first: (echo; echo ‘eval “$(/opt/homebrew/bin/brew shellenv)“’) &gt;&gt; /Users/yourusername/.zprofile\nThe second: eval “$(/opt/homebrew/bin/brew shellenv)”\n\n\nOnce Homebrew is installed, we can now install the three dependencies in your terminal. One by one, please copy and paste the following lines and execute separately (by pressing return after each).\n\nbrew install gnu-tar\nbrew install node\nbrew install ispell\n\nYou should now be done!\nIf you run into any problems installing these, please refer to documentation online for Homebrew, gnu-tar, node.js, and ispell.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Installing Necessary Packages on Your Computer</span>"
    ]
  },
  {
    "objectID": "application.html",
    "href": "application.html",
    "title": "3  Emacs Application",
    "section": "",
    "text": "To download the Emacs application, please run the following line in your Terminal: brew install --cask emacs\nIf the package installer appears, follow its instructions. (You may need to drag the icon to the Application folder).\nIf you run into any problems, you can always download the application from Emacs For MacOS X.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Emacs Application</span>"
    ]
  },
  {
    "objectID": "configuration.html",
    "href": "configuration.html",
    "title": "4  IQSS Configuration",
    "section": "",
    "text": "To install our configuration, run the following line in your terminal:\n\ngit clone https://github.com/IQSS/IQSS.emacs.git ~/.emacs.d\n\nThis essentially copies our Emacs configuration to a folder named “.emacs.d” in your home folder. If you’d like, you can do so directly from the GitHub page by using the green “Code” button to Download ZIP. Then, you would unzip the file, move it to your home folder, and rename it “.emacs.d”. You would get a pop-up asking if you are sure that you want it to start with a dot. That is okay, it just means that it will be hidden. If you are in your Finder and you want to see or edit this folder, access your Home folder and then press Cmd+Shift+. to see your hidden files.",
    "crumbs": [
      "Installation",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>IQSS Configuration</span>"
    ]
  },
  {
    "objectID": "install_packages.html",
    "href": "install_packages.html",
    "title": "5  Install Emacs Packages",
    "section": "",
    "text": "Now we are going to open Emacs for the first time. This will install a lot of Emacs packages for you, almost automatically.\nIn the bottom, a message will ask you to press “y” to install packages. Please do. A lot of packages will load again.\nAfter some time, another message will pop up again asking you to press “y” to install a few more packages. Again, please do.\nThis may take a bit of time to install of these packages (~5 minutes).\nAt the end, you may or may not get a message that a package is deprecated. This should not be an issue, and it should not appear again when you open Emacs in the future.\nNow please close out of Emacs and reopen it.",
    "crumbs": [
      "Opening Emacs for the First Time",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Install Emacs Packages</span>"
    ]
  },
  {
    "objectID": "copilot_login.html",
    "href": "copilot_login.html",
    "title": "6  Copilot",
    "section": "",
    "text": "If you do not already have a Copilot subscription, you can do so on GitHub.\nNow that you have opened Emacs for the second time, you should see some messages at the bottom about “quelpa” or “copilot”. When these messages stop appearing, we need to complete a few Emacs commands to fully integrate with Copilot.\nNow, type:\n\nOption+x then type copilot-mode. Enter. This may give you prompts about logging in or installing the server. Follow each as they come up:\n\nOption+x install-server. Enter. When this is done, you may get a message saying that there is a newer version. You will need to do the next step, then. If not, skip the next step.\nOption+x reinstall-server. Enter. (Again, you may not need to do this!)\nOption+x copilot-login. Enter. If you have already authorized Copilot on your computer (e.g., in RStudio), this may not be necessary. This will give you a code to copy. Write it down. Follow the instructions, then press enter to access GitHub in your browser. Authorize your GitHub/Copilot in the browser according to the instructions.\n\n\nNow we are going to close Emacs and reopen it.\nThere should be a few messages on start-up, but nothing that you need to do.\nTo turn on Copilot mode, type: Option-x copilot-mode. Enter. At the bottom, it should tell you that copilot mode is enabled in the buffer.\nCopilot should now be integrated! If you pause when typing, suggestions should pop up for you. If not, try typing Option-x copilot-mode a few times, toggling it off/on again.\nIf you ever want to stop using it, or if you don’t have Copilot, just don’t turn on copilot-mode.",
    "crumbs": [
      "Opening Emacs for the First Time",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Copilot</span>"
    ]
  },
  {
    "objectID": "tutorial.html",
    "href": "tutorial.html",
    "title": "7  Emacs Tutorial",
    "section": "",
    "text": "To open up Emacs’s built-in tutorial, type Control-h t. (You may also need to type y for “yes” if it asks).\nWe strongly recommend that you complete this tutorial, as it shows you the most useful keys!",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Emacs Tutorial</span>"
    ]
  },
  {
    "objectID": "important_keys.html",
    "href": "important_keys.html",
    "title": "8  Important Keys",
    "section": "",
    "text": "Two of the most important keys you will need to know are the Control key (abbreviated by C) and the Option key (aka the “Meta” key or the “Alt” key, abbreviated by M).\nMost Emacs commands will require you to hold down either the Control key or the Meta key while typing. The syntax for Emacs commands are C-&lt;character&gt; which means hold the Control key when you press &lt;character&gt;. Additionally you may see M-&lt;chr 1&gt; &lt;chr 2&gt; which means hold the Meta key while you press the first character, release it, and then press the second character. Or you may see two in row, for example: C-x C-f, which means hold the Control key and press x and then f (while still holding the Control key). This is the “find a file” command.\nAdditionally, to quit Emacs you can type C-x C-c (or, of course, you can click out of the user interface).\nTo quit a command, use C-g. (You may want to repeatedly press C-g).",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Important Keys</span>"
    ]
  },
  {
    "objectID": "layout.html",
    "href": "layout.html",
    "title": "9  Layout",
    "section": "",
    "text": "Understanding the layout of Emacs, and the following terms and commands, is crucial in effectively navigating the workspace.\nThere are three main components of the Emacs workspace: frames, windows, and buffers. Frames are the rectangles on your screen. For example, on a Mac, you’ll likely see a gray top bar with the red, yellow, and green circles at the top of your frame. Each frame can be broken up into windows, which allow you to see documents. Each window holds a single buffer, which is text content, that is already from a file or can be saved to a file.\nYou can have multiple windows open inside a single frame at a time, allowing you to see multiple files, or different parts of the same file, at the same time. Additionally, you can have multiple frames, each its own separate instance of Emacs, allowing you to switch between projects all on the same screen.\nAdditionally, there is a smaller section at the bottom of an Emacs frame. First, you will see the mode line, which tells you information about the current buffer being displayed, including its name, modes, and position. Underneath this, you will see the mini buffer, which is where you will enter commands and see interactive text. You can access the mini buffer by pressing M-x, and then searching for commands.\nYou can open up another frame with the command C-x 5 2. (This will open the same file that you already have opened in a second frame). You can also do M-x make-frame.\nTo switch between frames, use C-x 5 o (for “other”). This will cycle through your open Emacs frames.\nTo close your current frame, you can use the command C-x 5 0, or M-x delete-frame.\nTo open another window inside the same frame, there are multiple commands you can use, depending on how you want the window to open:\n\n\n\n\n\n\n\nCommand\nFunction\n\n\n\n\nC-x 2\nSplit the current frame horizontally. This will open the same buffer as the one you current have open.\n\n\nC-x 3\nSplit the current frame vertically.\n\n\nC-x 4 f &lt;select file&gt;\nOpen a specific file in a new window.\n\n\nC-x 4 b &lt;select buffer&gt;\nOpen a specific buffer in a new window. This will list recent buffers, including messages, and scratch work.\n\n\n\n\nAdditional commands to close or move windows include:\n\n\n\n\n\n\n\nCommand\nFunction\n\n\n\n\nC-x 0\nClose out of the window where your cursor is.\n\n\nC-x 1\nClose out of all windows except for the one where your cursor is.\n\n\nC-x o\nMoves your cursor to the next window. If you repeatedly do this, the cursor will cycle through the open windows.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Layout</span>"
    ]
  },
  {
    "objectID": "creating.html",
    "href": "creating.html",
    "title": "10  Creating and Setting Up Documents",
    "section": "",
    "text": "To create your document, type C-x C-f (“Find a file”). Then use your arrow keys and return to navigate to the folder in which you’d like your document to live. When the top line of your mini buffer says the name of the correct folder, make sure that your cursor is on the top line, after the slash, and then type the name that you would like for your document. If you are making a Latex file, make sure to include the “.tex” suffix. Click return when you are done, and a new buffer with the name of the file will be displayed in your window.\nYou can also set local variables within a comment block at the end of a file. While most customizations will be already downloaded for you inside the init.el and custom.el files from the IQSS configuration, you wish to have file-specific customizations as well. You can use the following as an example of what you can put at the end of a file:\n% Local Variables:\n% mode: latex\n% TeX-master: t\n% TeX-engine: pdflatex\n% fill-column: 80\n% End:\n\nYou must have the first and the last line; these tell Emacs that you’re defining local variables.\nThe “mode” tells Emacs that you are typing in LaTeX.\n“TeX-master: t” tells Emacs that you are in the “master file” which refers to the file which includes all of your header information. For example: if you are in a project, say a book with multiple chapters, and each chapter has its own .tex file, you could use TeX-master to tell Emacs which file contains the header information. So, in your main.tex file, you could have: “” which reads in your chapter1.tex file. In the chapter files, you could simply write your LaTeX code, and include % TeX-master: “main.tex” in your local variables.\n“TeX-engine” tells Emacs how to compile your LaTeX file – in this case, we want a pdf.\n“fill-column: 80” tells Emacs that we want our text to automatically wrap after 80 characters.\nWe can also define which dictionary we want spell check to use.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Creating and Setting Up Documents</span>"
    ]
  },
  {
    "objectID": "moving.html",
    "href": "moving.html",
    "title": "11  Moving Around Your Document",
    "section": "",
    "text": "Emacs makes it extremely easy to move around your document without needing to use your mouse or trackpad (although, you can always use those, too!). Some of the most common commands to move throughout the document are:\nMoving by screens:\n\n\n\n\n\n\n\nCommand\nFunction\n\n\n\n\nC-v\nMove forward one screen (a couple lines of overlap will be provided).\n\n\nM-v\nMove backward one screen.\n\n\nC-l\nIf you do this once, it will center the screen on your cursor. If you do this again, your cursor will move to the top of the screen. If you do this once again, your cursor will move to the bottom of the screen.\n\n\n\n\nMoving by characters:\n\n\n\nCommand\nFunction\n\n\n\n\nC-p OR &lt;up key&gt;\nGo to the previous line.\n\n\nC-n OR &lt;down key&gt;\nGo to the next line.\n\n\nC-b OR &lt;left key&gt;\nMove one space backward.\n\n\nC-f OR &lt;right key&gt;\nMove one space forward.\n\n\n\n\nMoving by words:\n\n\n\nCommand\nFunction\n\n\n\n\nM-f\nGo to the next word.\n\n\nM-b\nGo to the previous word.\n\n\n\n\nMoving in a line:\n\n\n\nCommand\nFunction\n\n\n\n\nC-a\nGo to the beginning of the line.\n\n\nC-e\nGo to the end of the line.\n\n\n\n\nMoving between sentences:\n\n\n\nCommand\nFunction\n\n\n\n\nM-a\nGo to the beginning of the sentence.\n\n\nM-e\nGo to the end of the sentence.\n\n\n\n\nMoving to the extremes:\n\n\n\nCommand\nFunction\n\n\n\n\nM-shift-, OR M-&lt;\nGo to the beginning of the document.\n\n\nM-shift-. OR M-&gt;\nGo to the end of the document.\n\n\n\n\nMoving your screen (without moving the cursor):\n\n\n\nCommand\nFunction\n\n\n\n\nC-&lt;up key&gt;\nMove the visible part of the buffer up.\n\n\nC-&lt;down key&gt;\nMove the visible part of the buffer down.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Moving Around Your Document</span>"
    ]
  },
  {
    "objectID": "editing.html",
    "href": "editing.html",
    "title": "12  Editing Your Document",
    "section": "",
    "text": "Text editing in Emacs has some different terminology than what you may be used to. For instance, there is “killing” which deletes text (but saves it to a “kill ring” that you still have access to), and “yanking” which brings text back. This is similar to cutting/pasting.\nHowever, we’ve also included keyboard shortcuts where you can continue to use Cmd+C and Cmd+V for copy and paste, as you normally would on your Mac.\nOne good thing about the kill ring is that you have continued access to text that you may have previously deleted and you may want to bring it back. Here are some of the commands that you may find useful:\n\n\n\n\n\n\n\nCommand\nFunction\n\n\n\n\nC-w\nIf you have a region highlighted, this will kill the region to your kill ring.\n\n\nM-w\nIf you have a region highlighted, this will copy the region to your killing ring without deleting the text.\n\n\nC-y\nYank back the last kill (i.e. paste what you just deleted)\n\n\nM-y &lt;select text&gt;\nAllows you to select which of your previous kills that you’d like to bring back.\n\n\n\n\nSearching for text:\n\n\n\n\n\n\n\nCommand\nFunction\n\n\n\n\nC-s\nSearch for a string (only from your cursor on, i.e., forward search)\n\n\nC-r\nSearch for a string (backwards)\n\n\nRET\nQuit searching\n\n\nM-C-s\nRegular expression search (forwards).\n\n\nM-C-r\nRegular expression search (backwards).\n\n\n\n\nCopilot commands:\n\n\n\nCommand\nFunction\n\n\n\n\nM-x copilot-mode\nToggle on/off copilot mode.\n\n\nM-C-RET\nAccept a completion.\n\n\nC-&lt;right&gt;\nAccept by word.",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Editing Your Document</span>"
    ]
  },
  {
    "objectID": "saving.html",
    "href": "saving.html",
    "title": "13  Saving and Compiling Your Document",
    "section": "",
    "text": "To save a file, use C-c C-s. You should see “Wrote &lt;document-name&gt;” in the mini buffer.\nTo compile a Latex document, use C-c C-c. You may need to follow a few simple prompts. For example, you may need to tell Emacs that this is Latex.\nIf you are compiling a beamer presentation, and you did not specify your Tex engine in your document, you will need to execute the following command before compiling your document: M-x tex-engine-set and then select xetex and return. Now use C-c C-c. \nThen, in your finder, you should see a slew of new files all with the same name as your .tex file, but with various suffixes. Find the one that is &lt;document-name&gt;.pdf and open it. Congrats! You’ve made your document!",
    "crumbs": [
      "Getting Started",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Saving and Compiling Your Document</span>"
    ]
  },
  {
    "objectID": "problems.html",
    "href": "problems.html",
    "title": "14  Common Problems",
    "section": "",
    "text": "You may have keybindings set for your computer that supersede the keybindings set in Emacs. For example, my C-&lt;up&gt;, C-&lt;down&gt;, and C-&lt;right&gt; controls were used by my Mac for Mission Control and Applications settings. To disable these keybindings, go to your Apple Menu &gt; System Settings &gt; Keyboard &gt; Keyboard Shortcuts and then locate the settings you’d like to disable. Uncheck them. Full instructions for Macs can be found here. Instructions for PCs can be found here.\nEmacs is on the older side. Newer installations seem to have some problems with loading in some packages. For example, I could not install ’use-package with the M-x install-packages command, but instead had to install it by looking at M-x list-packages.",
    "crumbs": [
      "Common Hazards",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Common Problems</span>"
    ]
  },
  {
    "objectID": "commands.html",
    "href": "commands.html",
    "title": "15  Commands List",
    "section": "",
    "text": "All of the previous commands, and some additional ones are listed below. From the GNU Emacs Survival Card.\nRunning Emacs:\n\n\n\n\n\n\n\nCommand\nFunction\n\n\n\n\nC-x C-c\nQuit Emacs\n\n\nC-x C-f\nEdit file; this command uses the mini buffer to read the file name; use this to create new files by entering the name of the new file\n\n\nC-x C-s\nSave file\n\n\nC-x k\nKill a buffer\n\n\nC-g\nIn most contexts: cancel, stop, abort partially types or executing command\n\n\nC-x u\nUndo\n\n\n\n\nMoving About:\n\n\n\nCommand\nFunction\n\n\n\n\nC-l\nScroll current line to center of window\n\n\nC-x b\nSwitch to another buffer\n\n\nM-&lt;\nMove to beginning of the buffer\n\n\nM-&gt;\nMove to the end of the buffer\n\n\nM-g M-g\nGo to a given line number\n\n\n\n\nMultiple Windows:\n\n\n\nCommand\nFunction\n\n\n\n\nC-x 0\nRemove the current window from the display\n\n\nC-x 1\nMake active window the only window\n\n\nC-x 2\nSplit window horizontally\n\n\nC-x 3\nSplit window vertically\n\n\nC-x o\nMove to other window\n\n\n\n\nRegions:\n\n\n\nCommand\nFunction\n\n\n\n\nC-space\nSet a mark\n\n\nM-h\nMark entire paragraph\n\n\nC-x h\nMark entire buffer\n\n\n\n\nKilling, Yanking, Copying and Pasting\n\n\n\n\n\n\n\nCommand\nFunction\n\n\n\n\nC-w\nKill region\n\n\nM-w\nCopy region to kill-ring\n\n\nC-k\nKill from the cursor all the way to the end of the line\n\n\nM-DEL\nKill word\n\n\nC-y\nYank back the last kill (C-w C-y combination could be used to move text around)\n\n\nM-y\nReplace last yank with previous kill\n\n\nCmd-C\nCopy\n\n\nCmd-V\nPaste\n\n\n\n\nSearching:\n\n\n\nCommand\nFunction\n\n\n\n\nC-s\nSearch for a string (forwards)\n\n\nC-r\nSearch for a string (backwards)\n\n\nRET\nQuit searching\n\n\nM-C-s\nRegular expression search\n\n\nM-C-r\nReverse regular expression search\n\n\n\n\nTags\n\n\n\nCommand\nFunction\n\n\n\n\nM-.\nFind a definition\n\n\nM-*\nPop back to where M-. was last invoked\n\n\n\n\nCompiling:\n\n\n\nCommand\nFunction\n\n\n\n\nC-c C-c\nCompile the file\n\n\n\n\nGetting Help:\n\n\n\nCommand\nFunction\n\n\n\n\nC-h\nEmacs help\n\n\nC-h t\nRun the Emacs tutorial\n\n\nC-h i\nEnter Info, the documentation browser\n\n\nC-h a\nShow commands matching a string\n\n\nC-h k\nDisplay documentation of the function invoked by a keystroke\n\n\nC-h m\nGet mode-specific information\n\n\n\n\nCopilot:\n\n\n\nCommand\nFunction\n\n\n\n\nM-x copilot-mode\nToggle on/off copilot mode.\n\n\nM-C-RET\nAccept a completion.\n\n\nC-&lt;right&gt;\nAccept by word.",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Commands List</span>"
    ]
  },
  {
    "objectID": "glossary.html",
    "href": "glossary.html",
    "title": "16  Glossary of Key Terms",
    "section": "",
    "text": "Buffer: A temporary storage area used for holding text that is being edited.\nFrame: A graphical element that contains one or more windows. If you have multiple frames open, you can have separate instances of Emacs running at once.\nKilling: Deleting text, but storing it in a “kill ring” for future use.\nMini Buffer: A special area at the bottom of the screen used for user input and displaying messages from Emacs itself. It is where Emacs prompts the user for commands, file names, search strings, and other input.\nMode Line: A special area located at the bottom of the window, just above the minibuffer (if present). It provides information about the current state of the buffer and the editing environment.\nWindow: A subdivision within a frame where buffers are displayed. Each window typically shows the contents of a single buffer.\nYanking: Pasting previously killed text back into a document.",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Glossary of Key Terms</span>"
    ]
  },
  {
    "objectID": "external_res.html",
    "href": "external_res.html",
    "title": "17  External Resources",
    "section": "",
    "text": "TO DO TO DO",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>External Resources</span>"
    ]
  }
]